# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YPs1HL2QM-JWHqeHqfEFJMuVgtu2L4MZ
"""

import pandas as pd
import json
import ast
import requests


def wrangling_duration(df):
    df["avg_temp_monthly"] = df["avg_temp_monthly"].apply(json.loads)
    temp_monthly = pd.json_normalize(df["avg_temp_monthly"])
    df = pd.concat([df.drop(columns=["avg_temp_monthly"]), temp_monthly], axis=1)

    for n in range(1,13):
        df.drop(columns=[(str(n)) + ".min", (str(n)) + ".max"], inplace=True)

    df["ideal_durations"] = df["ideal_durations"].apply(ast.literal_eval)

    df["ideal_durations"] = df["ideal_durations"].apply(lambda lst: ' '.join(item.strip() for item in lst))

    df["ideal_durations"] = [duration.lower() for duration in df["ideal_durations"].values]
    return df

def wrangling_budget(df):
    df["budget_level"] = [budget.lower() for budget in df["budget_level"].values]
    df["budget_level"] = df["budget_level"].replace({"budget": "economic"})
    return df


def wrangling(df):
    df["avg_temp_monthly"] = df["avg_temp_monthly"].apply(json.loads)
    temp_monthly = pd.json_normalize(df["avg_temp_monthly"])
    df = pd.concat([df.drop(columns=["avg_temp_monthly"]), temp_monthly], axis=1)

    for n in range(1,13):
        df.drop(columns=[(str(n)) + ".min", (str(n)) + ".max"], inplace=True)

    df["ideal_durations"] = df["ideal_durations"].apply(ast.literal_eval)
    df["ideal_durations"] = df["ideal_durations"].apply(lambda lst: ' '.join(item.strip() for item in lst))
    df["ideal_durations"] = [duration.lower() for duration in df["ideal_durations"].values]

    df["budget_level"] = [budget.lower() for budget in df["budget_level"].values]
    df["budget_level"] = df["budget_level"].replace({"budget": "economic"})

    return df


def remove_months(df, month):
    month = int(month)
    if month not in range(1, 13):
        raise ValueError("Month must be an integer between 1 and 12.")
    months = list(range(1, 13))
    no_month_trip = [x for x in months if x != month]
    columns_to_drop = [f"{x}.avg" for x in no_month_trip]
    df = df.drop(columns=columns_to_drop)
    
    return df

def filter_df(travel_df):
    """This function will filter the dataset containing the information of 560 cities around the world to provide the user with a ranking based on their preferences."""

    # Valid inputs definition
    valid_durations = {"weekend", "short trip", "one week", "long trip"}
    valid_budgets = {"luxury", "mid-range", "economic"}
    valid_interests = ["urban", "culture", "adventure", "nature", "beaches", "nightlife", "cuisine", "wellness", "seclusion"]

    # Ideal duration input
    ideal_duration = input("How long do you want your trip to be: weekend, short trip, one week, or long trip? ").lower()
    while ideal_duration not in valid_durations:
        ideal_duration = input("Please enter one of the following values: weekend, short trip, one week, or long trip. ").lower()

    # Budget level input
    budget_level = input("What is your budget for your trip: luxury, mid-range, or economic? ").lower()
    while budget_level not in valid_budgets:
        budget_level = input("Please enter one of the following values: luxury, mid-range, or economic. ").lower()

    # Month of the trip input
    month = input("In which month of the year do you want to go on your trip? Please enter a number between 1 and 12. ")
    if month in range(1, 13):
        try:
            month = int(month)
        except ValueError:
            print("Please enter a valid number between 1 and 12.")

    # User main interest input
    while True:
        interests_input = input("Select up to three interests (if more than one, comma separated) among: culture, adventure, nature, beaches, nightlife, cuisine, wellness, urban, and seclusion: ").lower().split(", ")
        if all(interest in valid_interests for interest in interests_input) and len(interests_input) <= 3:
            break
        else:
            print("Invalid input. Please make sure to select up to three interests from the given options.")

    # Creating the filtered DataFrame
    try:
        filtered_df = travel_df[(travel_df["ideal_durations"].str.contains(ideal_duration, case=False)) & (travel_df["budget_level"] == budget_level)]

        # Sort by interest columns; make sure column names exist in the DataFrame
        pd.set_option('display.max_colwidth', None)
        interest_columns = [col for col in interests_input if col in travel_df.columns]
        filtered_df = filtered_df.sort_values(by=interest_columns, ascending=False)

        # Drop columns
        filtered_df = filtered_df.drop(columns=["id", "region", "latitude", "longitude", "ideal_durations", "budget_level", "culture", "adventure",	"nature", "beaches", "nightlife", "cuisine", "wellness", "urban", "seclusion"], axis=1)

        # Show only top 5 cities
        filtered_df = filtered_df[:5]

        filtered_df = remove_months(filtered_df, month)

        # Renaming average temperature month
        column_to_rename = f"{month}.avg"

        if column_to_rename not in filtered_df.columns:
            print(f"Column '{column_to_rename}' does not exist.")
        else:
            new_column_name = "avg_temperature(ÂºC)"
            filtered_df = filtered_df.rename(columns={column_to_rename: new_column_name})
        
        message = "Here are the top 5 cities where you could go according to your preferences: "

    except Exception as error:
        print(f"Error in filtering: {error}")

    return message, filtered_df

def get_airport_code(city_name, df):
    # Locate the city in the DataFrame
    result = df.loc[df['city'] == city_name, 'IATA']
    return result.iloc[0] if not result.empty else None

file = "/Users/laurasuemitsu/Desktop/DATA_FT_May_2025/Final project/Notebooks/airports_codes.csv"
df_airports = pd.read_csv(file)

def departuring_details():
    while True:
        departure_city = input("Enter the departure city: ")
        departure_code = get_airport_code(departure_city, df_airports)
        if departure_code:
            break
        else:
            print("No airport found in our database. Please enter another city. ")

    while True:
        arrival_city = input("Enter the arrival city: ")
        arrival_code = get_airport_code(arrival_city, df_airports)
        if arrival_code:
            break
        else:
            print("No airport found in our database. Please enter another city. ")

    dep_date_input = input("Enter the departure date (YYYY-MM-DD): ")
    ret_date_input = input("Enter the returning date (YYYY-MM-DD): ")

    return departure_code, arrival_code, dep_date_input, ret_date_input

def run_API_2 (departure_code, arrival_code, dep_date_input):
    url = "https://flights-sky.p.rapidapi.com/google/flights/search-one-way"
    querystring = {"departureId": departure_code,"arrivalId": arrival_code, "departureDate": dep_date_input}

    headers = {
	"x-rapidapi-key": "ba7cdcaca5mshe733bf910269aafp1b245cjsnef6eeb88a0b5",
	"x-rapidapi-host": "flights-sky.p.rapidapi.com"
    }

    try:
        response = requests.get(url, headers=headers, params=querystring)
        response.raise_for_status()  # Raises an HTTPError for bad responses

        data = response.json()

        # Optionally process or return the data
        return data

    except requests.exceptions.HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}")
    except Exception as err:
        print(f"An error occurred: {err}")

    return data

def check_airport(departure_code, arrival_code, dep_date_input):
    if departure_code and arrival_code:
        result = run_API_2(departure_code, arrival_code, dep_date_input)
        return result
    else:
        print("No airport found in our database. Please restart the app.")

def normalize(row):
    flight_info = pd.json_normalize(row)
    return flight_info

def get_df(API_data):
    df_0 = pd.json_normalize(API_data)
    df_1 = pd.json_normalize(df_0['data.topFlights'][0], sep='_')
    df_2 = df_1.drop(columns=['detailToken', 'segments', 'airlineCode', 'isCodeShare', 'hasTransit', 'fareId', 'metaData', 'baggage', 'airline', 'isAvailable'], axis = 1)
    df_3 = df_2.sort_values(by="price")
    return df_3

def choose_flight():
    flight = input("Which flight would you like to choose? Please enter its index (number on the first column of the table): ")
    if flight.isnumeric() == True:
         print('Thank you! Have a great trip.')
    else:
         flight = input("Please, enter the number corresponding to your chosen flight: ")
    return flight

